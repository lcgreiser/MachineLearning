import os
import unittest
from unittest import TestCase

import numpy as np

from machine_learning.neural_networks.activation_functions import Linear, Tanh, Softmax, Sigmoid
from machine_learning.neural_networks.layers import ForwardLayer, OutputLayer
from machine_learning.neural_networks.loss_functions import MSELoss, CategoricalCrossentropyLoss
from machine_learning.neural_networks.neural_network import NeuralNetwork


class TestNeuralNetwork(TestCase):

    def test_regression(self):
        model = NeuralNetwork([ForwardLayer(3, 5, Tanh),
                               ForwardLayer(5, 3, Sigmoid),
                               OutputLayer(MSELoss, 3, 4, Sigmoid)])

        x = np.array([[0.89259001,0.44370052,0.16607783],[0.76260107,0.19482665,0.72785098],[0.76204893,0.42874008,0.8668082],[0.55099072,0.68757372,0.96542611],[0.77039881,0.94350523,0.12497321],[0.34901297,0.35678411,0.5232979],[0.44843121,0.90581711,0.01790174],[0.04189721,0.47332913,0.56428695]])
        t = np.array([[0.00988898,0.51358846,0.01270561,0.15249155],[0.41825793,0.56290026,0.1427796,0.29747734],[0.69400756,0.08362137,0.0826119,0.10455015],[0.25913394,0.36198779,0.89534828,0.27201967],[0.62984792,0.54882778,0.81962974,0.06960916],[0.04383601,0.73603913,0.3646284,0.243977],[0.13744534,0.5558649,0.23617243,0.71645496],[0.32967109,0.22854805,0.85018949,0.97122575]])
        weights = [np.array([[0.71009105,-0.21126497,0.5120209,-0.02572018,0.8096668],[-0.7396622,-0.21116978,0.4919892,0.70055693,-0.84201777],[-0.12760454,0.55022866,0.0189622,0.02575219,-0.16246486],[-0.57704234,-0.6142249,-0.04725343,0.43006635,-0.7721809]]),np.array([[-0.5612737,-0.76002795,-0.4288877],[-0.62689644,-0.4463104,-0.14683104],[0.20598203,0.11407703,0.4747017],[-0.4698576,0.44285172,-0.50164694],[-0.804153,-0.0367322,0.29343086],[-0.91458154,0.72281766,-0.33169723]]),np.array([[-0.5029196,0.89771736,-0.04946667,0.5286354],[-0.41330874,0.71062267,-0.8459275,0.63367224],[-0.40212554,0.513862,-0.7952415,0.3324195],[-0.29760784,0.81488925,0.81796306,-0.5202941]])]
        y = np.array([[0.26043135,0.8845679,0.4379503,0.5964289],[0.2679347,0.8777284,0.4473477,0.5854803],[0.26130834,0.88399345,0.44073415,0.59543127],[0.25352338,0.8912052,0.43434292,0.60712624],[0.2459719,0.89754313,0.4253437,0.6177293],[0.25618762,0.88898784,0.43927932,0.60314566],[0.24393836,0.8994663,0.42535597,0.6209098],[0.25273475,0.89233303,0.4377911,0.60870975]])
        loss = 0.14149876
        grads = [np.array([[-0.00462501,-0.00407045,0.00193576,-0.00169808,-0.00294176],[-0.00423937,-0.00360523,0.00220707,-0.0015302,-0.00179873],[-0.00449247,-0.00444732,0.00240144,-0.00176115,-0.00227897],[-0.00710978,-0.00650399,0.00357375,-0.00272203,-0.00391234]]),np.array([[-0.00474579,-0.00266059,-0.00378164],[-0.00455938,-0.00197647,-0.00243915],[0.00492271,0.00221687,0.0027616],[0.00626529,0.00305429,0.00400093],[-0.00595767,-0.00317765,-0.0043823],[0.00944522,0.00435661,0.00543427]]),np.array([[-0.00281199,0.01088552,-0.0007378,0.01439951],[-0.00482221,0.01835562,0.0004854,0.02520891],[-0.00243131,0.00905043,0.0007027,0.0128526],[-0.0057147,0.02169142,0.00135825,0.03009394]])]

        self.check_model(model, x, t, weights, y, loss, grads)

    def test_categorical(self):
        model = NeuralNetwork([ForwardLayer(3, 5, Tanh),
                               ForwardLayer(5, 3, Sigmoid),
                               OutputLayer(CategoricalCrossentropyLoss, 3, 4, Softmax)])

        x = np.array([[0.2607472,0.03182903,0.68547088],[0.85562531,0.10287387,0.88617189],[0.75469221,0.85363183,0.95909524],[0.49470727,0.56691105,0.64176575],[0.37407268,0.64212308,0.59592412],[0.61019268,0.2885744,0.90081239],[0.60797302,0.78277784,0.70981861],[0.07103365,0.03853753,0.16310503]])
        t = np.array([[0.27752737,0.3606293,0.18270132,0.17914201],[0.04647625,0.09724884,0.52781971,0.32845521],[0.1466702,0.10492226,0.34597218,0.40243536],[0.40181975,0.22510622,0.16086351,0.21221052],[0.09934865,0.29593925,0.23351011,0.37120198],[0.24231527,0.16934877,0.31101521,0.27732074],[0.10004448,0.0137197,0.47637816,0.40985765],[0.30912864,0.32392758,0.2016434,0.16530038]])
        weights = [np.array([[-0.17040801,0.68486494,-0.40828878,-0.23919791,-0.84250814],[-0.21021521,-0.26462507,0.38827187,-0.7131033,-0.3786914],[0.5450588,0.10102773,-0.17185783,0.22328001,0.17346221],[0.1190992,0.16835177,0.21303856,0.72106254,0.41600156]]),np.array([[-0.83328503,-0.35554248,-0.58267784],[0.42109162,-0.00625378,0.09962702],[0.5474587,0.51333743,-0.20648706],[-0.13301033,-0.30467308,-0.5029862],[0.547072,-0.54418314,0.78300196],[-0.2485249,-0.03291154,0.55110073]]),np.array([[0.32644165,-0.39797646,-0.81104374,-0.1812774],[0.01783741,-0.21254241,-0.49801958,-0.37416446],[-0.78832436,0.1745969,0.01792616,0.33604705],[-0.77339214,0.02088678,-0.16939461,-0.06023687]])]
        y = np.array([[0.12859546,0.33320585,0.1916338,0.3465649],[0.13205488,0.3339845,0.1967072,0.33725333],[0.13771012,0.33613083,0.18941176,0.33674723],[0.13564304,0.33513513,0.18713233,0.34208944],[0.13572183,0.33525202,0.18533435,0.34369174],[0.13211296,0.33408535,0.19384874,0.339953],[0.13784513,0.33600226,0.18619302,0.33995965],[0.13096666,0.33346096,0.18397635,0.351596]])
        loss = 1.4487698
        grads = [np.array([[-0.00901963,0.00176787,0.00309417,-0.0048378,0.00631618],[-0.00604493,0.00117692,0.00145594,-0.00390921,0.00432733],[-0.01076458,0.00179666,0.00124197,-0.00653268,0.00980522],[-0.01358852,0.00163438,-0.00285113,-0.00950777,0.01631913]]),np.array([[0.00096559,0.00098554,0.00685454],[0.00271485,0.0024336,0.00841025],[-0.00149571,-0.00074337,0.00179522],[-0.00059809,-0.00042146,0.01142102],[-0.00362822,-0.00307194,0.00258329],[0.0015681,0.00240108,0.02275854]]),np.array([[-0.03004085,0.05278568,-0.04426135,0.02151651],[-0.02884917,0.06393025,-0.05320779,0.01812671],[-0.0391522,0.07070346,-0.05988767,0.02833639],[-0.06908505,0.13580188,-0.11570825,0.04899143]])]

        self.check_model(model, x, t, weights, y, loss, grads)

    def check_model(self, model, x, t, weights, y, loss, grads):
        for weight, layer in zip(weights, model.layers):
            layer.weights = weight

        np.testing.assert_almost_equal(model.forward(x), y)
        np.testing.assert_almost_equal(model.backward(t).mean(), loss)
        for grad, layer in zip(grads, model.layers):
            np.testing.assert_almost_equal(layer.grad_weights.mean(axis=0), grad)


if __name__ == '__main__':
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'
    unittest.main()


